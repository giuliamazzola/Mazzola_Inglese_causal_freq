---
title: "GAMMs for LVC workshop"
date: "28th February 2025"
output: html_notebook
---

```{r message=FALSE, warning=FALSE, include=FALSE}
packages = c("dplyr","readr","tidyr", "rstatix", "ruler", "broom","mgcv", "itsadug", "magrittr",
             "ggplot2", "ggforce","janitor",
             "tidymv", 
             "tidygam",
             "doFuture","parallel","parallelly",
             "viridis","scales","colorspace","rcartocolor")
lapply(packages, library, character.only = TRUE)
options(pillar.sigfig = 4)

```

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.

# Data and Setup

```{r}
data_workshop <- read_csv("../data/data_workshop.csv")
```

Convert factors to ordered factors and set contrasts to "contr.treatment" (Soskuthy, 2017, p.24)

```{r datasetup}
data_gamm <- data_workshop %>%
  mutate_if(is.character,as.factor) %>% 
  filter(lexSet == "GOAT") %>% # so we only look at one lexical set
  mutate(ageGroup_ord = ordered(ageGroup)) %>%
  mutate(folSeg_ord = ordered(folSeg)) %>% 
  mutate(medium_ord = ordered(medium)) %>% 
  mutate(style_ord = ordered(style)) %>% 
  mutate(lexSet_ord = ordered(lexSet)) %>%
  mutate(borough_ord = ordered(borough)) %>% 
  mutate(style_med_ord = ordered(interaction(style, medium))) #interaction between style and medium

contrasts(data_gamm$ageGroup_ord) <- "contr.treatment"
contrasts(data_gamm$folSeg_ord) <- "contr.treatment"
contrasts(data_gamm$medium_ord) <- "contr.treatment"
contrasts(data_gamm$style_ord) <- "contr.treatment"
contrasts(data_gamm$borough_ord) <- "contr.treatment"
contrasts(data_gamm$style_med_ord) <- "contr.treatment"

```

## themes and colours
```{r themes, message=FALSE, warning=FALSE}
theme_Caitlin_gamm <- function() {theme_bw(base_size = 16) %+replace%
    theme(plot.background  = element_rect(fill = "transparent", colour = NA),
          panel.background = element_rect(fill="transparent", colour=NA),
          legend.background = element_rect(fill="transparent", colour=NA),
          legend.key = element_rect(fill="transparent", colour=NA),
          panel.grid.major = element_line(colour = "white", size = 0.2),
          panel.grid.minor = element_line(colour = "grey98", size = 0.5))}

theme_Caitlin_gammpresent <- function() {theme_bw(base_size = 22) %+replace%
    theme(plot.background  = element_rect(fill = "transparent", colour = NA),
          panel.background = element_rect(fill="white", colour=NA),
          legend.background = element_rect(fill="transparent", colour=NA),
          legend.key = element_rect(fill="transparent", colour=NA),
          panel.grid.major = element_line(colour = "white", size = 0.2),
          panel.grid.minor = element_line(colour = "grey98", size = 0.5))}

safe_pal_3 <- carto_pal(3, "Safe")
safe_pal_4 <- carto_pal(4, "Safe")
safe_pal_5 <- carto_pal(5, "Safe")
safe_pal_6 <- carto_pal(6, "Safe")
safe_pal_7 <- carto_pal(7, "Safe")
safe_pal_8 <- carto_pal(8, "Safe")
safe_pal_9 <- carto_pal(9, "Safe")
safe_pal_10 <- carto_pal(10, "Safe")
safe_pal_11 <- carto_pal(11, "Safe")
safe_pal_12 <- carto_pal(12, "Safe")
```

## Parallel Computing
These models can get large, this chunk of code sets up a cluster to use all the available cores on your machine. The final output will tell you how many cores you have available. On my PC it's 12. 
```{r parallel, message=TRUE, warning=FALSE}
#stopCluster(cl)
all_cores <- availableCores()
registerDoFuture()
cl <- makeCluster(all_cores)
plan(cluster, workers = cl)
all_cores
```

# Basic model
```{r gamm1}
F2.gamm1 <- bam(F2 ~
                  s(percent, k=4)
               , data=data_gamm,method="fREML", nthreads = all_cores)

#nthreads is to split the task across your computer power
```

```{r gamm1 summary}
gam.check(F2.gamm1)
summary(F2.gamm1)
```
In the summary you can check if the K is ok
Parametric is the fixed effects
approximate significance of smooth: tells you something about the shape; in the visualisation it is more clear, so do not bother too much with this.


# Basic Model plus borough

parametric term (borough_ord), smooth terms tell us about the difference in shape

smooth needs to be there and the by tells you if it si grouped by something
parametric term borough_ord does not need to be there

```{r gamm2}
F2.gamm2 <- bam(F2 ~ borough_ord +
                  s(percent, k=4) +
                  s(percent, by = borough_ord, k=4)
               , data=data_gamm,method="fREML", nthreads = all_cores)
```

```{r gamm2 summary}
gam.check(F2.gamm2)
summary(F2.gamm2)
```
## Interpreting the model
### Get predicted values

This set of code outputs a data frame with calculated values from your model. You can then use this to plot the model. If you are building a model which takes a while to run I recommend saving this data out to a csv so you don't have to keep rerunning the model.
```{r gamm2 predictions}
F2.gamm2.p <- tidymv::predict_gam(F2.gamm2)
# write_csv(F2.gamm2.p,"../data/F2-gamm2-p.csv")
```

### Plotting the model
```{r gamm2 plot}
F2.gamm2.plot <- ggplot(data = F2.gamm2.p,
                        aes(
                          x=percent,
                          y=fit,
                          linecolour = borough_ord
                          ))+
  theme_Caitlin_gamm()+
  geom_smooth_ci(borough_ord)+# from tidymv
  scale_y_continuous(position = "left",
                  limits = c(800,1600),
                  breaks = seq(0, 2000, 200)
                  )+
  NULL
F2.gamm2.plot
```

## Basic Model plus borough - with speaker random smooths
```{r gamm3}
F2.gamm3 <- bam(F2 ~ borough_ord +
                  s(percent, k=4) +
                  s(percent, by = borough_ord, k=4) +
                  s(percent, ID, bs="fs", xt="cr",m=1,k=4) #random smooth
               , data=data_gamm,method="fREML", nthreads = all_cores)
```

`s(percent, ID, bs="fs", xt="cr",m=1,k=4)` --> the random smooth, by participant (ID) but you still need to smooth them by your x value 


Don't worry about the warning here - it's because s(x) and s(x, f, bs = "fs") are both seen as 1D smooths of x. Normally that would be a _big_ problem, but the "fs" basis is fully penalized, meaning if necessary the entire set of smooths can be shrunk out of the model.

```{r gamm3 summary}
gam.check(F2.gamm3)
summary(F2.gamm3)
```

We want our residual not to have a pattern and look random, so this model is better 


You can compare the models. You do not use AIC to compare, it runs a ksquared test and give you a score, the lower one is better 
```{r compare 2vs3}
compareML(F2.gamm2,F2.gamm3)
```
Adding the random effects improves the model fit. Let's add word as well.

## Basic Model plus borough - with speaker and word random smooths
```{r gamm4}
F2.gamm4 <- bam(F2 ~ borough_ord +
                  s(percent, k=4) +
                  s(percent, by = borough_ord, k=4) +
                  s(percent, ID, bs="fs", xt="cr",m=1,k=4) + #random smooth 
                s(percent, word, bs="fs", xt="cr",m=1,k=4) #random smooth
               , data=data_gamm,method="fREML", nthreads = all_cores)
```


```{r gamm4 summary}
gam.check(F2.gamm4)
summary(F2.gamm4)
```

```{r compare 3vs4}
compareML(F2.gamm3,F2.gamm4)
```
Adding word also improves the model fit. Let's get the predictions and look at the plot. For fitting and interpreting the model we're not interested in the random effects so we exclude them from the model predictions.
```{r gamm4 predictions}
F2.gamm4.p <- tidymv::predict_gam(F2.gamm4,
                                  exclude_terms = list(
                            "s(percent,ID)"
                            ,"s(percent,word)"
                          ),
                          values = list( # put it in the same order as they appear in the summary
                            ID = NULL
                            ,word = NULL
                          )
                          )
# write_csv(F2.gamm4.p,"../data/F2-gamm4-p.csv")
```

### Plotting the model
```{r gamm4 plot}
F2.gamm4.plot <- ggplot(data = F2.gamm4.p,
                        aes(
                          x=percent,
                          y=fit,
                          linecolour = borough_ord
                          ))+
  theme_Caitlin_gamm()+
  geom_smooth_ci(borough_ord)+
  scale_y_continuous(position = "left",
                  limits = c(800,1600),
                  breaks = seq(0, 2000, 200)
                  )+
  NULL
F2.gamm4.plot
```
There's two more types of term I want to add. The first is called a tensor product interaction - duration may have an effect on the shapes of the trajectories so we want a non-linear interaction between duration and the smooths for (Soskuthy, 2017, p. 25). The second is a term to tie together the individual trajectories. The latter is the one that usually causes computer size/speed problems.


ti= interaction between percent and duration, only for continuous variables
traj: is the token number, not all of this measurements are independent from each other, one is computationally very intense. Look at the difference between random intercept, random slope and random smooth 

```{r gamm5}
F2.gamm5 <- bam(F2 ~ borough_ord +
                  s(percent, k=4) +
                  s(percent, by = borough_ord, k=4) +
                  ti(percent, dur) + #interaction between shape and duration
                  s(percent, ID, bs="fs", xt="cr",m=1,k=4) + #random smooth
                  s(percent, word, bs="fs", xt="cr",m=1,k=4) + #random smooth
                # s(percent, traj, bs="fs", xt="cr",m=1,k=4) #random smooth
                  s(traj, bs="re") + #random intercept
                  s(traj, percent, bs="re") # random slope
               , data=data_gamm,method="fREML", nthreads = all_cores)
```

```{r compare 4vs5}
compareML(F2.gamm4,F2.gamm5)
```



After this it's just a case of adding more predictors as relevant for your data. I would usually add these one at a time and use the compareML() function to see if they're improving the model fit. We'll skip a few steps and jump to a more complicated model to look at interpretation.

# Final GAMM
```{r gamm9}
F2.gamm9 <- bam(F2 ~ borough_ord +
                  ageGroup_ord + 
                  folSeg_ord +
                  style_med_ord +
                  s(percent, k=4) +
                  s(percent, by = borough_ord, k=4) +
                  s(percent, by = ageGroup_ord, k=4) +
                  s(percent, by = folSeg_ord, k=4) +
                  s(percent, by = style_med_ord, k=4) +
                  ti(percent, dur) + #interaction between shape and duration
                  s(percent, ID, bs="fs", xt="cr",m=1,k=4) + #random smooth
                  s(percent, word, bs="fs", xt="cr",m=1,k=4) + #random smooth
                # s(percent, traj, bs="fs", xt="cr",m=1,k=4) #random smooth
                  s(traj, bs="re") + #random intercept
                  s(traj, percent, bs="re") # random slope
               , data=data_gamm,method="fREML", nthreads = all_cores)
```
```{r gamm9 summary}
summary(F2.gamm9)
gam.check(F2.gamm9)
```

ti: it is an interaction like in the linear models but it can be used only for continous variables, and it does not matter if you have all the terms as something else too

s(x, by=y) is grouping, you are asking whether the shape of the curve changes by a group (you are adding another dimension, not difference between measurments but in shape)




As before we can extract the predictions:
```{r gamm9 predictions}
F2.gamm9.p <- tidymv::predict_gam(F2.gamm9,
                                  exclude_terms = list(
                            "s(percent:ageGroup_ord" #copy from the summary exactly, see that there are brackets missing? from the smooth bits 
                            ,"s(percent:style_med_ord"
                            ,"s(percent,ID)"
                            ,"s(percent,word)"
                            ,"ti(percent,dur)"
                            ,"s(traj)"
                            ,"s(traj,percent"
                          ),
                          values = list(
                            ageGroup_ord = NULL
                            ,style_med_ord = NULL
                            ,ID = NULL
                            ,word = NULL
                            ,dur = mean(data_gamm$dur)
                            ,traj = NULL
                          )
                          )
# write_csv(F2.gamm9.p,"../data/F2-gamm9-p.csv")
```
Then plot the predicted values.
```{r gamm9 plot}
F2.gamm9.plot <- ggplot(data = F2.gamm9.p,
                        aes(
                          x=percent,
                          y=fit,
                          linecolour = borough_ord
                          ))+
  theme_Caitlin_gamm()+
  geom_smooth_ci(borough_ord)+
  scale_y_continuous(position = "left",
                  limits = c(800,1600),
                  breaks = seq(0, 2000, 200)
                  )+
  facet_wrap(~folSeg_ord)+
  NULL
F2.gamm9.plot
```